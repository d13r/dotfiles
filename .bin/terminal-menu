#!/usr/bin/env bash
set -euo pipefail

# Load 'style' as a function to avoid the overhead of calling a script
source "$HOME/.bash/style"

# Changed to default to prompt because I'm considering removing the menu (31 Aug 2023)
host=''

# Disable tab completion (tab, shift+tab, escape escape)
bind -r '\t' 2>/dev/null
bind -r '\e[Z' 2>/dev/null
bind -r '\e\e' 2>/dev/null

# Bind Escape key
bind -x '"\e": exit_menu' 2>/dev/null

exit_menu() {
    clear
    exit
}

# Allow Tmux mode to be toggled
tmux=true

print_tmux_status() {
    if $tmux; then
        style grey "  Tmux: ON   (ctrl-t to toggle)"
    else
        style grey "  Tmux: OFF  (ctrl-t to toggle)"
    fi
}

print_quick_reference() {
    style yellow,bold '  Quick Reference'
    sed -n 's/^#|\s\?/  /p' ~/.ssh/config
    if [[ -f ~/.ssh/config_local ]]; then
        sed -n 's/^#|\s\?/  /p' ~/.ssh/config_local
    fi
}

update_tmux_status() {
    tput sc # Save cursor
    tput cup 1 0
    tput el # Clear line
    print_tmux_status
    tput rc # Restore cursor
}

bind -x '"\C-t": toggle_tmux' 2>/dev/null

toggle_tmux() {
    if $tmux; then
        tmux=false
    else
        tmux=true
    fi
    update_tmux_status
}

# After exiting a terminal, return to the menu
while true; do

    # Set the window title - otherwise it may be blank or "Untitled window" when returning
    echo -ne "\e]2;Terminal\a"

    # Display prompt
    clear
    echo
    print_tmux_status
    echo
    tput sc # Save cursor
    echo
    echo
    print_quick_reference
    tput rc # Restore cursor

    # Prompt for hostname (also accepts an alias defined in .ssh/config)
    trap 'exit_menu' INT
    HISTFILE=~/.terminal_menu_history
    history -r
    read -rp "  $(style lwhite 'Enter Hostname:') " -ei "$host" host
    history -s "${host#\#}"
    history -w
    trap INT

    # Alt-# writes to the history and clears input without running anything
    if [[ $host == '#'* ]]; then
        host=''
        continue
    fi

    # Connect to the given server and run 'tmux' or $SHELL as appropriate
    if [[ -z $host ]]; then
        # Local
        if $tmux; then
            command='tm'
        else
            command=$SHELL
        fi
    else
        # SSH
        if $tmux; then
            # Not quoted so I can pass a session name
            command="h $host"
        else
            # Not quoted so I can pass extra options
            command="ssh-with-bashrc $host"
        fi
    fi

    clear
    trap true INT
    if ! eval "$command"; then
        echo
        echo 'Press any key to continue...'
        read -rs -n1
    fi
    trap INT

done
