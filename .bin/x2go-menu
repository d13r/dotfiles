#!/usr/bin/env bash
set -euo pipefail

# Make sure the default shell is changed for new panes
# (Bit hacky to do this inside this script, but I haven't found a simple way to do it from 'terminal-for-x2go' yet)
if [[ $(tmux display-message -p '#S' 2>/dev/null) = 'x2go' ]]; then
    tmux set default-shell ~/.bin/x2go-menu
fi

# Load 'style' as a function to avoid the overhead of calling a script
source "$HOME/.bash/style"

# Disable tab completion (tab, shift+tab, escape escape)
bind -r '\t' 2>/dev/null
bind -r '\e[Z' 2>/dev/null
bind -r '\e\e' 2>/dev/null

# Bind Escape key
bind -x '"\e": exit_menu' 2>/dev/null

exit_menu() {
    tput cnorm
    clear
    exit
}

# After exiting an application, return to the menu
while true; do

    # Set the window title - otherwise it may be blank or "Untitled window" when returning
    # The extra space is because '@<hostname>' is appended automatically
    echo -ne "\e]2;X2Go \a"

    # Set the pane name
    tmux rename-window 'x2go-menu' &>/dev/null

    # Display prompt
    clear
    echo
    echo
    echo "       $(style lcyan,bold,underline 'X2Go')"
    echo
    echo "   $(style lyellow '[b]') Beyond Compare"
    echo "   $(style lyellow '[d]') DBeaver"
    echo "   $(style lyellow '[c]') Google Chrome"
    echo "   $(style lyellow '[p]') PhpStorm"
    echo "   $(style lyellow '[t]') Terminal"
    echo
    echo "   $(style lyellow '[q]') Quit"
    echo

    # Wait for input
    trap exit_menu INT
    tput civis
    read -re -n1 action
    tput cnorm
    trap INT

    # Run the given command
    name=''

    case "${action,,}" in
        b) command='bcompare'; name='bcompare' ;;
        c) command='google-chrome'; name='google-chrome' ;;
        d) command='dbeaver'; name='dbeaver' ;;
        p) command='ssh webdev phpstorm'; name='phpstorm' ;;
        q) command='clear; exit' ;;
        t) command='bash' ;;
        *) continue ;;
    esac

    if [[ -n $name ]]; then
        tmux rename-window "$name" &>/dev/null
    else
        tmux set-option -w automatic-rename on &>/dev/null
    fi

    clear
    trap true INT
    if ! eval "$command"; then
        echo
        echo 'Press any key to continue...'
        read -rs -n1
    fi
    trap INT

done
